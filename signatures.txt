#light





namespace ImageLibrary
  module Operations = begin
    val pixelWork : int * int * int -> int * int * int
    val grayOut :
      newRow:(int * int * int) list ->
        row:(int * int * int) list -> (int * int * int) list
    val GrayHelp :
      newImage:(int * int * int) list list ->
        image:(int * int * int) list list -> (int * int * int) list list
    val Grayscale :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
    val rgbLimit : e:'a -> limit:'a -> int when 'a : comparison
    val pixelThresh :
      'a * 'a * 'a -> limit:'a -> int * int * int when 'a : comparison
    val threshOut :
      newRow:(int * int * int) list ->
        row:('a * 'a * 'a) list -> limit:'a -> (int * int * int) list
        when 'a : comparison
    val ThrHelp :
      newImage:(int * int * int) list list ->
        image:('a * 'a * 'a) list list ->
          limit:'a -> (int * int * int) list list when 'a : comparison
    val Threshold :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list ->
              threshold:int -> (int * int * int) list list
    val FlipHorizHelp :
      newImage:'a list list -> image:'a list list -> 'a list list
    val FlipHorizontal :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
    val edgePixel :
      x1:int -> y1:int -> z1:int -> x2:int -> y2:int -> z2:int -> float
    val pixelE :
      int * int * int ->
        int * int * int -> int * int * int -> limit:int -> int * int * int
    val EOut :
      newRow:(int * int * int) list ->
        rowA:(int * int * int) list ->
          rowB:(int * int * int) list -> limit:int -> (int * int * int) list
    val EHelp :
      newImage:(int * int * int) list list ->
        image:(int * int * int) list list ->
          limit:int -> (int * int * int) list list
    val EdgeDetect :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list ->
              threshold:int -> (int * int * int) list list
    val RotateRight90 :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
  end

